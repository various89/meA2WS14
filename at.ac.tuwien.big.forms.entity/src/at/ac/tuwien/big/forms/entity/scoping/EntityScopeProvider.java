/*
 * generated by Xtext
 */
package at.ac.tuwien.big.forms.entity.scoping;

import java.util.Collection;
import java.util.HashSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.forms.Entity;
import at.ac.tuwien.big.forms.Attribute;
import at.ac.tuwien.big.forms.Feature;
import at.ac.tuwien.big.forms.FormsPackage;
/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
public class EntityScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	/**
	 * The id of an entity must be an attribute that is either defined by the entity itself or one of
	 * its super types (remember, the inheritance hierarchy can have arbitrary many levels).
	 * @param entity_
	 * @param eReference
	 * @return
	 */
	public IScope scope_Entity_id(Entity entity, EReference eReference) {
		if (eReference.equals(FormsPackage.Literals.ENTITY__ID)) {
			return Scopes.scopeFor(getAllMemberAttributes(entity, new HashSet<Attribute>()));
		}
		return IScope.NULLSCOPE;
	}

	private Collection<Attribute> getAllMemberAttributes(Entity entity, Collection<Attribute> attributes) {		
		// Get all attributes of entity
		for (Feature f : entity.getFeatures()) {
			if (f instanceof Attribute) {
				attributes.add((Attribute) f);
			}
		}
		
		// if entity has supertype, get all attributes again
		if (entity.getSuperType() != null) {
			getAllMemberAttributes(entity.getSuperType(), attributes);
		}
		
		return attributes;
	}


}
