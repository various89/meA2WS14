// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
// implement your grammar here, starting with the root element: EntityModel
EntityModel returns EntityModel:
	{EntityModel}
	(entityModelElements+=EntityModelElement)*
;

EntityModelElement:
	Entity | Enumeration
;

NamedElement:
	Entity | Feature | Enumeration | Literal
	;

Entity returns Entity:
	'entity 'name=ID ('extends' superType = [Entity | QualifiedName])? 
	'{'
		'id 'id=[Attribute | QualifiedName]','
		(features+=Feature*)
	'}'
;

Feature:
	Relationship | Attribute
;

Relationship returns Relationship:
	'reference 'name = ID ':' target=[Entity|QualifiedName]'['lowerBound=INT'..'(upperBound=INT|'-'INT)']' ('opposite-of'opposite=[Relationship | QualifiedName])?(',')?
;

Attribute returns Attribute:
	'attribute ' name=ID(mandatory?='*')? ':' type = AttributeType ':'? enumeration=[Enumeration|QualifiedName]?(',')?
;

Enumeration returns Enumeration:
	'enum' name=ID '{'
		(literals+=Literal)+
	'}'
;

Literal returns Literal:
	name=ID '=' value=EString(',')?
;

enum AttributeType returns AttributeType:
	String = '1' | Integer = '2' | Text = '3' | Date = '4' | 
	Time = '5' | Email = '6' | Boolean = '7' | Year = '8' | None = '0'
;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
	
QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;