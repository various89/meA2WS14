/*
 * generated by Xtext
 */
package at.ac.tuwien.big.forms.form.scoping;

import java.util.Collection;
import java.util.HashSet;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.forms.Attribute;
import at.ac.tuwien.big.forms.AttributePageElement;
import at.ac.tuwien.big.forms.AttributeType;
import at.ac.tuwien.big.forms.AttributeValueCondition;
import at.ac.tuwien.big.forms.Column;
import at.ac.tuwien.big.forms.Entity;
import at.ac.tuwien.big.forms.Feature;
import at.ac.tuwien.big.forms.Form;
import at.ac.tuwien.big.forms.FormModel;
import at.ac.tuwien.big.forms.FormsPackage;
import at.ac.tuwien.big.forms.Page;
import at.ac.tuwien.big.forms.Relationship;
import at.ac.tuwien.big.forms.RelationshipPageElement;
import at.ac.tuwien.big.forms.SelectionField;
import at.ac.tuwien.big.forms.Table;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
public class FormScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	/**
	 * 1)
	 * An attribute page element has to reference an attribute of the entity, 
	 * the containing form references. 
	 * Example: The text-field PublicationTitleField is only allowed to handle 
	 * the attributes of the entity Publication (title, keywords, …, fields). 
	 */
	public IScope scope_AttributePageElement_attribute(AttributePageElement attributePageElement, EReference eReference) {
		Page page = (Page) attributePageElement.eContainer();
		Form form = (Form) page.eContainer();
		Entity entity = form.getEntity();
		if (eReference.equals(FormsPackage.Literals.ATTRIBUTE_PAGE_ELEMENT__ATTRIBUTE)) {
			return Scopes.scopeFor(getAllMemberAttributes(entity, new HashSet<Attribute>()));
		}
		return IScope.NULLSCOPE;
	}
	
	private Collection<Attribute> getAllMemberAttributes(Entity entity, Collection<Attribute> attributes) {
		for (Feature f : entity.getFeatures()) {
			if (f instanceof Attribute) {
				attributes.add((Attribute) f);
			}
		}
		
		if (entity.getSuperType() != null) {
			getAllMemberAttributes(entity.getSuperType(), attributes);
		}
		
		return attributes;
	}
	
	/**
	 * 2)
	 * A relationship page element has to reference a relationship of the entity 
	 * the containing form references. 
	 * Example: The table AuthorTable in page "Authors" is only allowed to handle 
	 * relationships of the entity Publication (authors, proceedings, journal, book). 
	 */
	public IScope scope_RelationshipPageElement_relationship(RelationshipPageElement relationshipPageElement, EReference eReference) {
		Page page = (Page) relationshipPageElement.eContainer();
		Form form = (Form) page.eContainer();
		Entity entity = form.getEntity();
		if (eReference.equals(FormsPackage.Literals.RELATIONSHIP_PAGE_ELEMENT__RELATIONSHIP)) {
			return Scopes.scopeFor(getAllMemberRelationships(entity, new HashSet<Relationship>()));
		}
		return IScope.NULLSCOPE;
	}
	
	private Collection<Relationship> getAllMemberRelationships(Entity entity, Collection<Relationship> relationships) {
		for (Feature f : entity.getFeatures()) {
			if (f instanceof Relationship) {
				relationships.add((Relationship)f);
			}
		}
		
		if (entity.getSuperType() != null) {
			getAllMemberRelationships(entity.getSuperType(), relationships);
		}
		
		return relationships;
	}
	
	/**
	 * 3)
	 * An attribute value condition has to reference an attribute of the entity 
	 * the containing form references. 
	 * Example: The condition ShowIfJA in page "Journal" can only reference 
	 * attributes of the entity Publication (title, keywords, …, fields).  
	 */
	public IScope scope_AttributeValueCondition_attribute(AttributeValueCondition attributeValueCondition, EReference eReference) {
		Page page = (Page) attributeValueCondition.eContainer();
		Form form = (Form) page.eContainer();
		Entity entity = form.getEntity();
		if (eReference.equals(FormsPackage.Literals.ATTRIBUTE_VALUE_CONDITION__ATTRIBUTE)) {
			return Scopes.scopeFor(getAllMemberAttributes(entity, new HashSet<Attribute>()));
		}
		return IScope.NULLSCOPE;
	}
	
	/**
	 * 4)
	 * A selection field is only allowed to reference an attribute of type Boolean 
	 * or an attribute which has a reference to an enumeration. 
	 * Example: The selection-field ExternalPersonSelection in page "Person Details" 
	 * is only allowed to reference the attributes external and faculty of the entity 
	 * Person.  
	 */
	public IScope scope_SelectionField_attribute(SelectionField selectionField, EReference eReference) {
		Page page = (Page) selectionField.eContainer();
		Form form = (Form) page.eContainer();
		Entity entity = (Entity) form.getEntity();
		if (eReference.equals(FormsPackage.Literals.ATTRIBUTE_PAGE_ELEMENT__ATTRIBUTE)) {
			return Scopes.scopeFor(getAllMemberAttributesWithTypeBooleanOrEnum(entity, new HashSet<Attribute>()));
		}
		return IScope.NULLSCOPE;
	}
	
	private Collection<Attribute> getAllMemberAttributesWithTypeBooleanOrEnum(Entity entity, Collection<Attribute> attributes) {
		for (Feature f : entity.getFeatures()) {
			if (f instanceof Attribute) {
				if (((Attribute) f).getType() == AttributeType.BOOLEAN ||
						((Attribute) f).getEnumeration() != null) {
					attributes.add((Attribute) f);
				}
			}
		}
		
		if (entity.getSuperType() != null) {
			getAllMemberAttributesWithTypeBooleanOrEnum(entity.getSuperType(), attributes);
		}
		
		return attributes;
	}
	
	/**
	 * 5)
	 * A relationship page element has to reference a form of the same form model as 
	 * editing form. 
	 * Example: The table AuthorTable can only reference the editing forms PublicationForm, 
	 * PersonForm, ProceedingsForm, JournalForm, BookForm, or EventForm.  
	 */
	public IScope scope_RelationshipPageElement_editingForm(RelationshipPageElement relationshipPageElement, EReference eReference) {
		Page page = (Page) relationshipPageElement.eContainer();
		Form form = (Form) page.eContainer();
		FormModel formModel = (FormModel) form.eContainer();
		if (eReference.equals(FormsPackage.Literals.RELATIONSHIP_PAGE_ELEMENT__EDITING_FORM)) {
			return Scopes.scopeFor(formModel.getForms());
		}
		return IScope.NULLSCOPE;
	}
	
	/**
	 * 6)
	 * A column of a table can only reference attributes of the entity of the form the table 
	 * edits. 
	 * Example: The column AuthorFirstNameColumn can only edit the attributes of the 
	 * entity Person (email, external, …, lastname), because the table AuthorTable 
	 * defines the PersonForm as editing form, which references the entity Person.   
	 */
	public IScope scope_AttributePageElement_attribute(Column column, EReference eReference) {
		Table table = (Table) column.eContainer();
		Form editingForm = table.getEditingForm();
		Entity entity = editingForm.getEntity();
		if (eReference.equals(FormsPackage.Literals.ATTRIBUTE_PAGE_ELEMENT__ATTRIBUTE)) {
			return Scopes.scopeFor(getAllMemberAttributes(entity, new HashSet<Attribute>()));
		}
		return IScope.NULLSCOPE;
	}

}
